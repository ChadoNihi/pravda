package pravda.dotnet

import pravda.dotnet.CIL._
import pravda.dotnet.Signatures.SigType._
import pravda.dotnet.Signatures._
import pravda.dotnet.TablesData._
import utest._

object IfTests extends TestSuite {

  val tests = Tests {
    'ifParse - {
      val Right((_, cilData, methods, signatures)) = FileParser.parseFile("if.exe")

      DiffUtils.assertEqual(
        methods,
        List(
          Method(
            List(
              Nop,
              LdcI4S(10),
              StLoc0,
              LdLoc0,
              LdcI41,
              Clt,
              StLoc1,
              LdLoc1,
              BrFalseS(4),
              Nop,
              LdcI44,
              StLoc0,
              Nop,
              LdLoc0,
              LdcI45,
              Cgt,
              StLoc2,
              LdLoc2,
              BrFalseS(14),
              Nop,
              LdLoc0,
              LdcI46,
              Cgt,
              StLoc3,
              LdLoc3,
              BrFalseS(4),
              Nop,
              LdcI47,
              StLoc0,
              Nop,
              Nop,
              LdLoc0,
              LdcI40,
              Cgt,
              StLocS(4),
              LdLocS(4),
              BrFalseS(6),
              Nop,
              LdcI44,
              StLoc0,
              Nop,
              BrS(4),
              Nop,
              LdcI45,
              StLoc0,
              Nop,
              LdLoc0,
              LdcI42,
              BleS(6),
              LdLoc0,
              LdcI44,
              Clt,
              BrS(1),
              LdcI40,
              StLocS(5),
              LdLocS(5),
              BrFalseS(6),
              Nop,
              LdcI46,
              StLoc0,
              Nop,
              BrS(4),
              Nop,
              LdcI48,
              StLoc0,
              Nop,
              LdLoc0,
              LdcI47,
              BgtS(7),
              LdLoc0,
              LdcI4S(10),
              Cgt,
              BrS(1),
              LdcI41,
              StLocS(6),
              LdLocS(6),
              BrFalseS(6),
              Nop,
              LdcI41,
              StLoc0,
              Nop,
              BrS(4),
              Nop,
              LdcI40,
              StLoc0,
              Nop,
              LdLoc0,
              LdcI41,
              BleS(4),
              LdLoc0,
              LdcI43,
              BltS(7),
              LdLoc0,
              LdcI4S(20),
              Cgt,
              BrS(1),
              LdcI41,
              StLocS(7),
              LdLocS(7),
              BrFalseS(6),
              Nop,
              LdcI42,
              StLoc0,
              Nop,
              BrS(4),
              Nop,
              LdcI43,
              StLoc0,
              Nop,
              Ret
            ),
            2,
            Some(16)
          ),
          Method(List(LdArg0, Call(MemberRefData(TypeRefData(6, "Object", "System"), ".ctor", 6)), Nop, Ret), 0, None)
        )
      )

      DiffUtils.assertEqual(
        signatures.toList.sortBy(_._1),
        List(
          (1, MethodRefDefSig(true, false, false, false, 0, Tpe(Void, false), List(Tpe(I4, false)))),
          (6, MethodRefDefSig(true, false, false, false, 0, Tpe(Void, false), List())),
          (10,
           MethodRefDefSig(true,
                           false,
                           false,
                           false,
                           0,
                           Tpe(Void, false),
                           List(Tpe(ValueTpe(TypeRefData(15, "DebuggingModes", "")), false)))),
          (16,
           LocalVarSig(
             List(
               LocalVar(I4, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false),
               LocalVar(Boolean, false)
             ))),
          (36, MethodRefDefSig(false, false, false, false, 0, Tpe(Void, false), List()))
        )
      )

      import pravda.vm.asm.Op._
      import pravda.vm.asm.Datum._

      def bytes(is: Int*): Array[Byte] =
        Array[Byte](is.map(_.toByte): _*)

      DiffUtils.assertEqual(
        Translator.translate(methods, cilData, signatures),
        Right(
          List(
            Dup,
            Push(Rawbytes("Main".getBytes)),
            Eq,
            JumpI("method_Main"),
            Jump("stop"),
            Label("method_Main"),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 10))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            LCall("Typed", "typedClt", 2),
            Push(Integral(8)),
            SwapN,
            Pop,
            Push(Integral(7)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br16"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 4))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br16"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 5))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(7)),
            SwapN,
            Pop,
            Push(Integral(6)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br38"),
            Nop,
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 6))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(6)),
            SwapN,
            Pop,
            Push(Integral(5)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br37"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 7))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br37"),
            Nop,
            Label("br38"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 0))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(5)),
            SwapN,
            Pop,
            Push(Integral(4)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br56"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 4))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br60"),
            Label("br56"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 5))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br60"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 2))),
            Swap,
            LCall("Typed", "typedClt", 2),
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br70"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 4))),
            LCall("Typed", "typedClt", 2),
            Jump("br71"),
            Label("br70"),
            Push(Rawbytes(bytes(1, 0, 0, 0, 0))),
            Label("br71"),
            Push(Integral(4)),
            SwapN,
            Pop,
            Push(Integral(3)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br85"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 6))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br89"),
            Label("br85"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 8))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br89"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 7))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br100"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 10))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Jump("br101"),
            Label("br100"),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Label("br101"),
            Push(Integral(3)),
            SwapN,
            Pop,
            Push(Integral(2)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br115"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br119"),
            Label("br115"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 0))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br119"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Swap,
            LCall("Typed", "typedClt", 2),
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br127"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 3))),
            LCall("Typed", "typedClt", 2),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br134"),
            Label("br127"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(bytes(1, 0, 0, 0, 20))),
            Swap,
            LCall("Typed", "typedClt", 2),
            Jump("br135"),
            Label("br134"),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Label("br135"),
            Push(Integral(2)),
            SwapN,
            Pop,
            Push(Integral(1)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(bytes(1, 0, 0, 0, 1))),
            Eq,
            JumpI("br149"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 2))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br153"),
            Label("br149"),
            Nop,
            Push(Rawbytes(bytes(1, 0, 0, 0, 3))),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br153"),
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Jump("stop"),
            Label("stop")
          ))
      )

    }
  }
}
