package pravda.dotnet.translation

import pravda.common.bytes.hex._
import pravda.dotnet.DiffUtils
import pravda.dotnet.parsers.FileParser
import pravda.vm.asm.Datum._
import pravda.vm.asm.Op._
import utest._

object IfTests extends TestSuite {

  val tests = Tests {
    'ifParse - {
      val Right((_, cilData, methods, signatures)) = FileParser.parseFile("if.exe")

      for {
        t <- Translator.translateVerbose(methods, cilData, signatures)
      } println(TranslationVisualizer.visualize(t))

      DiffUtils.assertEqual(
        Translator.translateAsm(methods, cilData, signatures),
        Right(
          List(
            Dup,
            Push(Rawbytes("Main".getBytes)),
            Eq,
            JumpI("method_Main"),
            Jump("stop"),
            Label("method_Main"),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Push(Integral(0)),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 0a")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 01")),
            LCall("Typed", "typedClt", 2),
            Push(Integral(8)),
            SwapN,
            Pop,
            Push(Integral(7)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br16"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 04")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br16"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 05")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(7)),
            SwapN,
            Pop,
            Push(Integral(6)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br38"),
            Nop,
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 06")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(6)),
            SwapN,
            Pop,
            Push(Integral(5)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br37"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 07")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br37"),
            Nop,
            Label("br38"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 00")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Integral(5)),
            SwapN,
            Pop,
            Push(Integral(4)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br56"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 04")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br60"),
            Label("br56"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 05")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br60"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 02")),
            Swap,
            LCall("Typed", "typedClt", 2),
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br70"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 04")),
            LCall("Typed", "typedClt", 2),
            Jump("br71"),
            Label("br70"),
            Push(Rawbytes(hex"01 00 00 00 00")),
            Label("br71"),
            Push(Integral(4)),
            SwapN,
            Pop,
            Push(Integral(3)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br85"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 06")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br89"),
            Label("br85"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 08")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br89"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 07")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br100"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 0a")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Jump("br101"),
            Label("br100"),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Label("br101"),
            Push(Integral(3)),
            SwapN,
            Pop,
            Push(Integral(2)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br115"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 01")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br119"),
            Label("br115"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 00")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br119"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 01")),
            Swap,
            LCall("Typed", "typedClt", 2),
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br127"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 03")),
            LCall("Typed", "typedClt", 2),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br134"),
            Label("br127"),
            Push(Integral(8)),
            Dupn,
            Push(Rawbytes(hex"01 00 00 00 14")),
            Swap,
            LCall("Typed", "typedClt", 2),
            Jump("br135"),
            Label("br134"),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Label("br135"),
            Push(Integral(2)),
            SwapN,
            Pop,
            Push(Integral(1)),
            Dupn,
            LCall("Typed", "typedNot", 1),
            Push(Rawbytes(hex"01 00 00 00 01")),
            Eq,
            JumpI("br149"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 02")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Jump("br153"),
            Label("br149"),
            Nop,
            Push(Rawbytes(hex"01 00 00 00 03")),
            Push(Integral(9)),
            SwapN,
            Pop,
            Nop,
            Label("br153"),
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Pop,
            Jump("stop"),
            Label("stop")
          ))
      )

    }
  }
}
